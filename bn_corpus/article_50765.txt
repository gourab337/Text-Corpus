হাইপার টেক্সট ট্রান্সফার প্রোটোকল (এইচটিটিপি) ব্যবহার করে সার্ভার থেকে ক্লায়েন্টের নিকট তথ্য আদান-প্রদান করা হয়, সময় তথ্যের পাশাপাশি নির্দিষ্ট একটি কোডও পাঠানো হয়, যাকে স্ট্যাটাস বা অবস্থাসূচক কোড বলা হয়। কোডগুলো যে কোনো ধরনের পারে। তবে RFC থেকে কিছু কোড নির্দিষ্ট করে দেয়া আছে যেগুলো গোটা বিশ্বে আদর্শ হিসেবে ব্যবহৃত হয়। কোডগুলোই মূলতঃ তালিকায় উল্লেখ করা হয়েছে। অধিকাংশ কোডগুলোর বর্ণনা উল্লেখ করার ক্ষেত্রে HTTP/1.1 আদর্শ (RFC 7231) -এর অনুসরণ করা হয়েছে। যেগুলো আদর্শের অন্তর্ভুক্ত নয়, সেগুলোতে তা আলাদা করে উল্লেখ করা হয়েছে। ইন্টারনেট অ্যাসাইন্ড নাম্বারস অথোরিটি (ইয়ানা) কোডগুলো আনুষ্ঠানিকভাবে দেখাশোনা করে থাকে। == 1xx তথ্যমূলক প্রতিক্রিয়া == তথ্যমূলক প্রতিক্রিয়ার অর্থ হলো: সার্ভারে ক্লায়েন্টের আবেদন গৃহীত হয়েছে এবং সার্ভার আবেদনের ধরন বুঝতে পেরেছে। ক্লায়েন্ট যাতে করে চূড়ান্ত প্রতিক্রিয়ার জন্য অপেক্ষা করে সে জন্য ধরনের অবস্থাসূচক কোড প্রেরণ করা হয়। ফলে সার্ভার থেকে প্রেরিত বার্তায় শুধুমাত্র অবস্থাসূচক লাইন, বিভিন্ন ধরনের হেডার, এবং সবশেষে একটা ফাঁকা লাইন থাকে (কোনো টেক্সট থাকে না)। যেহেতু HTTP/1.0 আদর্শে ধরনের প্রতিক্রিয়ার কথা উল্লেখ নেই, সেহেতু HTTP/1.0 অনুসরণ করে এমন কোনো ক্লায়েন্টের কাছে পরীক্ষামূলক অবস্থা ব্যতীত আর ''কোনো অবস্থাতেই'' সার্ভার থেকে ধরনের প্রতিক্রিয়া প্রেরণ করা যাবে না। 100 Continue সার্ভারে রিকুয়েস্ট হেডারগুলো গৃহীত হয়েছে এবং ক্লায়েন্ট চাইলে এখন রিকুয়েস্ট বডি (যদি প্রযোজ্য হয়, যেমন POST আবেদন প্রণালীর ক্ষেত্রে) পাঠাতে পারে। সার্ভারে বড় আকারের কোনো তথ্য প্রেরণ করার ক্ষেত্রে একে কাজে লাগানো যেতে পারে। কেননা সার্ভার শুরুতেই যদি আবেদন না মঞ্জুর করে সেক্ষেত্রে সার্ভারে বড় আকারে তথ্য পাঠানো সম্পূর্ণ বৃথা। এক্ষেত্রে ক্লায়েন্টের প্রথম রিকুয়েস্ট হেডারে Expect: 100-continue অবশ্যই থাকতে হবে এবং প্রতিক্রিয়ায় 100 Continue পাওয়া সাপেক্ষে সার্ভারে রিকুয়েস্ট বডি পাঠাতে হবে। কারণ সার্ভার যদি প্রতিক্রিয়ায় 403 Forbidden বা 405 Method Not Allowed স্ট্যাটাস কোড প্রেরণ করে তাহলে রিকুয়েস্ট পাঠানোর কোনো মানে নেই। 417 Expectation Failed দ্বারা বোঝানো হয় যে প্রথম রিকুয়েস্টটি পুনরায় পাঠাতে হবে কিন্তু Expect হেডার বাদ দিয়ে, কেননা সার্ভার এটি সাপোর্ট করে না (যেমন, HTTP/1.0 অনুসারী সার্ভারগুলো)। 101 Switching Protocols ক্লায়েন্ট সার্ভারকে তার প্রটোকল বদলানোর জন্য আবেদন করেছে এবং সার্ভার তা মঞ্জুর করেছে। 102 Processing (WebDAV; RFC 2518) ফাইল অপারেশনের ক্ষেত্রে একটা WebDAV রিকুয়েস্টে অনেকগুলো সাব-রিকুয়েস্ট থাকতে পারে যেগুলো প্রক্রিয়াকরণ করতে অনেক সময় লেগে যেতে পারে। সে ক্ষেত্রে এই রিকুয়েস্ট দিয়ে বোঝানো হয় যে সার্ভাররে আবেদন গৃহীত হয়েছে, এবং সার্ভার তা এখনো প্রসেস করছে। কাজেই এখনও চূডান্ত কোনো প্রতিক্রিয়া জানানো সম্ভব নয়। এটি রিকুয়েস্ট বিলীন হয়ে যাওয়া রোধ করে এবং ক্লায়েন্টকে টাইম-আউট হওয়া থেকে বিরত রাখে। 103 Early Hints (RFC 8297) পরবর্তী প্রতিক্রিয়ায় (বা, চূড়ান্ত প্রতিক্রিয়ায়) কি থাকতে পারে তার কিছু সম্ভাব্য হেডার পাঠাতে ব্যবহৃত হয়। == 2xx সফল == ধরনের স্ট্যাটাস কোড দ্বারা বোঝানো হয় যে সার্ভারে ক্লায়েন্টের আবেদন পৌঁছেছে, সার্ভার ক্লায়েন্টের আবেদন বুঝতে পেরেছে, এবং তা সফলভাবে গৃহীত হয়েছে। 200 OK সফল এইচটিটিপি রিকুয়েস্টের ক্ষেত্রে স্ট্যান্ডার্ড প্রতিক্রিয়া। কিন্তু প্রতিক্রিয়ায় কি থাকবে তা নির্ভর করবে আবেদন প্রণালীর উপরে। যেমন, একটা GET আবেদন প্রণালীর প্রতিক্রিয়াতে কোনো জিনিসের নির্দিষ্ট কিছু বৈশিষ্ট্য থাকবে যেখানে একটা POST আবেদন প্রণালীর প্রতিক্রিয়াতে থাকবে কিছু অ্যাকশানের ফলাফল। 201 Created আবেদন পুরোপুরি গৃহীত হয়েছে এবং ফলাফল হিসেবে সার্ভারে নতুন কিছু তৈরি হয়েছে। 202 Accepted আবেদন প্রসেসিং-এর জন্য গৃহীত হয়েছে, কিন্তু এখনো প্রসেসিং চলছে। শেষ পর্যন্ত প্রসেস পুরোপুরি শেষ হতেও পারে আবার নাও পারে। 203 Information (HTTP/1.1 থেকে) সার্ভার এক ধরনের প্রক্সি যা প্রকৃত সার্ভারের কাছ থেকে 200 OK প্রতিক্রিয়া পেয়েছে কিন্তু প্রক্সি সার্ভার সেটা কিছুটা রূপান্তর করে ক্লায়েন্টের কাছে পাঠাচ্ছে। 204 No Content সার্ভার সফলভাবে আবেদনটি প্রক্রিয়াকরণ করেছে এবং বিনিময়ে কোনো বার্তা পাঠাচ্ছে না বা পাঠানোর প্রয়োজন নেই। 205 Reset Content সার্ভার সফলভাবে আবেদনটি প্রক্রিয়াকরণ করেছে এবং বিনিময়ে কোনো বার্তা পাঠাচ্ছে না কিংবা পাঠানোর প্রয়োজন নেই, কিন্তু ক্লায়েন্টের কাছে যে নথিপত্র আছে সেটা পুনঃস্থাপন করার জন্য বলা হচ্ছে। 206 Partial Content (RFC 7233) সার্ভার রিসোর্সের কিছু অংশ প্রেরণ করছে। সার্ভার ঠিক কত অংশ পাঠাবে তা রিকুয়েস্ট হেডারে উল্লেখ থাকে। এর ফলে ক্লায়েন্ট বিঘ্নিত ডাউনলোড প্রথম থেকে শুরু না করে নির্দিষ্ট কোনো জায়গা থেকে শুরু করতে পারে, কিংবা একটা নির্দিষ্ট রিসোর্সকে অনেকগুলো অংশে ভাগ করে একসাথে ডাউনলোড করতে পারে। 207 Multi-Status (WebDAV; RFC 4918) কতগুলো সাব-রিকুয়েস্ট পাঠানো হয়েছে সে অনুসারে মূল বার্তায় একাধিক স্ট্যাটাস কোড থাকতে পারে। ধরণের বার্তা সাধারণত XML কিংবা JSON আকারে পাঠানো হয়। 208 Already Reported (WebDAV; RFC 5842) 207 Multi-Status-এ ইতোমধ্যে প্রতিক্রিয়া পাঠানো হয়েছে এবং পুনরায় আর পাঠানো হচ্ছে না। 226 IM Used (RFC 3229) ইতোমধ্যে আবেদনটি সফল হয়েছে এবং প্রতিক্রিয়াতে বর্তমান আবেদনের অনেক কিছু রয়েছে। == 3xx পুনর্নির্দেশ বা Redirection == ধরনের স্ট্যাটাস কোড দ্বারা বোঝানো হয় যে আবেদন সম্পন্ন করতে চাইলে ক্লায়েন্টকে আরও কিছু পদক্ষেপ নিতে হবে। ইউআরএল পুনর্নির্দেশ করার ক্ষেত্রে ধরনের স্ট্যাটাস কোডগুলো ব্যবহার করা হয়। যদি পরের আবেদন প্রণালী GET বা POST হয়, ইউজার এজেন্ট (যেমন, ওয়েব ব্রাউজার) পূনর্নির্দেশের কাজ করে থাকে। তবে এক্ষেত্রে অসীমসংখ্যক পূনর্নির্দেশের ব্যাপারে তাদের প্রয়োজনীয় ব্যবস্থা নিতে হয়। 300 Multiple Choices যে রিসোর্সের জন্য আবেদন করা হয়েছে তা ক্লায়েন্ট অনেক উপায়ে গ্রহণ করতে পারে, এবং যে কোনো সময়ে এদের মধ্যে মাত্র একটা নির্বাচন করতে পারবে। উদাহরণস্বরূপ, একই ভিডিও বিভিন্ন ফরম্যাটে কিংবা বিভিন্ন রেজলুশনে থাকতে পারে, যার মধ্যে কোনো নির্দিষ্ট সময়ে যে কোনো একটির জন্য আবেদন করতে পারে। 301 Moved Permanently বর্তমান এবং পরবর্তী সকল আবেদন পাঠানো ইউআরআইতে পুনর্নির্দেশ করতে হবে। 302 Found এটি এমন একটি উদাহরণ যার প্রথাগত ব্যবহার আদর্শগত ব্যবহারের সাথে সাংঘর্ষিক। HTTP/1.0 বিবরণী (RFC 1945) অনুসারে কোড দ্বারা ক্লায়েন্টকে একটি অস্থায়ী পুনর্নির্দেশের জন্য বলা হত (এর আসল নাম ছিল 302 Moved Temporarily), কিন্তু সকল জনপ্রিয় ওয়েব ব্রাউজারগুলো একে 303 See Other হিসেবে বাস্তবায়ন করেছে। ফলে এদের আলাদা করার জন্য HTTP/1.1 বিবরণীতে 303 এবং 307 নামক দুইটি পৃথক স্ট্যাটাস কোড যুক্ত করা হয়েছে। কিন্তু কিছু কিছু ওয়েব অ্যাপ্লিকেশন এবং ফ্রেমওয়ার্ক এখনো স্ট্যাটাস কোডকে 303 এর মতো করে ব্যবহার করে। 303 See Other (HTTP/1.1 থেকে) যে আবেদনটি ক্লায়েন্ট পাঠিয়েছে তা আরেকটি ইউআরআইতে পাওয়া যাবে, এবং তা পেতে গেলে GET আবেদন প্রণালী ব্যবহার করতে হবে। POST, PUT বা DELETE আবেদন প্রণালী ব্যবহার করে সার্ভারে আবেদন পাঠানোর পর যদি সার্ভার কোডটি পাঠায় তাহলে ক্লায়েন্টকে ধরে নিতে হবে যে প্রাপ্ত ইউআরআই হতে তথ্য নেয়ার জন্য GET আবেদন প্রণালী ব্যবহার করতে হবে। 304 Not Modified (RFC 7232) বা If-None-Match রিকুয়েস্ট হেডারে রিসোর্সের যে সংস্করণের কথা বলা হয়েছে তার কোনো পরিবর্তন হয় নি। ফলে, নতুন করে ওই রিসোর্সটি পাঠানোর প্রয়োজন নেই যেহেতু ক্লায়েন্টের কাছে ইতোমধ্যে উক্ত সংস্করণের রিসোর্সটি সংরক্ষিত আছে। 305 Use Proxy (HTTP/1.1 থেকে) যে রিসোর্সের জন্য আবেদন করা হয়েছে তা শুধুমাত্র প্রক্সি ব্যবহার করে পাওয়া যাবে। যে ঠিকানায় যেতে হবে তাও উল্লেখ করা থাকে। অনেক এইচটিটিপি ক্লায়েন্ট (যেমন, মোজিলা এবং ইন্টারনেট এক্সপ্লোরার) প্রধানতঃ নিরাপত্তার স্বার্থে ধরনের আবেদন সমর্থন করে না। 306 Switch Proxy আর ব্যবহৃত হয় না। এটা দ্বারা বোঝানো হত যে “পরবর্তী সকল আবেদন উল্লেখিত প্রক্সি ব্যবহার করে পাঠাতে হবে।” 307 Temporary Redirect (HTTP/1.1 থেকে) এক্ষেত্রে আবেদনটি পুনরায় প্রেরণ করতে হবে তবে অন্য আরেকটি ইউআরআই-তে। কিন্তু এর পরে যে সকল আবেদন প্রেরণ করা হবে, তা আবার আগের ইউআরআই-তেই করতে হবে। 302-এর থেকে এর পার্থক্য হলঃ যে আবেদন প্রণালীতে প্রথম আবেদনটি পাঠানো হয়েছে, ঠিক একই আবেদন প্রণালীতে পরের আবেদনটিও পাঠাতে হবে। যেমন, যে আবদনটি POST আবেদন প্রণালী ব্যবহার করে শুরুতে পাঠানো হয়েছিল, সেটিকে আবার POST আবেদন প্রণালী ব্যবহার করেই পরের ইউআরআইতে পাঠাতে হবে। 308 Permanent Redirect (RFC 7538) বর্তমান আবেদনটি এবং এর পরবর্তী সকল আবেদনসমূহ অন্য আরেকটি ইউআরআই ব্যবহার করে পাঠাতে হবে। 307 308, 302 301-এর ব্যবহারকে আংশিকভাবে প্রতিস্থাপন করেছে, কিন্তু উভয়েই ''আবেদন প্রণালী পরিবর্তন অনুমোদন করে না।'' কাজেই, একটা ফর্মের তথ্য স্থায়ীভাবে পুনর্নিদেশিত ইউআরআই-তে পাঠালেও তা পূর্বের মতো কাজ করবে। == 4xx ক্লায়েন্টের ত্রুটিসমূহ == চিত্র:HTTP 404.png|alt=A 404 error on ৪০৪ ত্রুটির পাতা শ্রেণির স্ট্যাটাস কোডগুলো সেই সব ক্ষেত্রে প্রযোজ্য যে সব ক্ষেত্রে স্বয়ং ক্লায়েন্টই ত্রুটির পেছনে দায়ী থাকে। Except when responding to HEAD request, the server ''should'' include an entity containing an explanation of the error situation, and whether it is temporary or permanent condition. These status codes are applicable to any request method. User agents ''should'' display any included entity to the user. 400 Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptive request routing). 401 Unauthorized (RFC 7235) Similar to ''403 Forbidden'', but specifically for use when authentication is required and has failed or has not yet been provided. The response must include header field containing challenge applicable to the requested resource. See Basic access authentication and Digest access authentication. 401 semantically means i.e. the user does not have the necessary credentials. Note: Some sites issue HTTP 401 when an IP address is banned from the website (usually the website domain) and that specific address is refused permission to access website. 402 Payment Required Reserved for future use. The original intention was that this code might be used as part of some form of digital cash or micropayment scheme, as proposed for example by GNU Taler, but that has not yet happened, and this code is not usually used. Google Developers API uses this status if particular developer has exceeded the daily limit on requests. Stripe API uses this code for errors with processing credit cards. 403 Forbidden The request was valid, but the server is refusing action. The user might not have the necessary permissions for resource, or may need an account of some sort. 404 Not Found The requested resource could not be found but may be available in the future. Subsequent requests by the client are permissible. 405 Method Not Allowed request method is not supported for the requested resource; for example, GET request on form that requires data to be presented via POST, or PUT request on read-only resource. 406 Not Acceptable The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request. See Content negotiation. 407 Proxy Authentication Required (RFC 7235) The client must first authenticate itself with the proxy. 408 Request Timeout The server timed out waiting for the request. According to HTTP specifications: "The client did not produce request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time." 409 Conflict Indicates that the request could not be processed because of conflict in the request, such as an edit conflict between multiple simultaneous updates. 410 Gone Indicates that the resource requested is no longer available and will not be available again. This should be used when resource has been intentionally removed and the resource should be purged. Upon receiving 410 status code, the client should not request the resource in the future. Clients such as search engines should remove the resource from their indices. Most use cases do not require clients and search engines to purge the resource, and "404 Not Found" may be used instead. 411 Length Required The request did not specify the length of its content, which is required by the requested resource. 412 Precondition Failed (RFC 7232) The server does not meet one of the preconditions that the requester put on the request. 413 Payload Too Large (RFC 7231) The request is larger than the server is willing or able to process. Previously called "Request Entity Too Large". 414 URI Too Long (RFC 7231) The URI provided was too long for the server to process. Often the result of too much data being encoded as query-string of GET request, in which case it should be converted to POST request. Called "Request-URI Too Long" previously. 415 Unsupported Media Type The request entity has media type which the server or resource does not support. For example, the client uploads an image as image/svg+xml, but the server requires that images use different format. 416 Range Not Satisfiable (RFC 7233) The client has asked for portion of the file (byte serving), but the server cannot supply that portion. For example, if the client asked for part of the file that lies beyond the end of the file. Called "Requested Range Not Satisfiable" previously. 417 Expectation Failed The server cannot meet the requirements of the Expect request-header field. 418 I'm teapot (RFC 2324) This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, ''Hyper Text Coffee Pot Control Protocol'', and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com. 421 Misdirected Request (RFC 7540) The request was directed at server that is not able to produce response. (for example because of connection reuse) 422 Unprocessable Entity (WebDAV; RFC 4918) The request was well-formed but was unable to be followed due to semantic errors. 423 Locked (WebDAV; RFC 4918) The resource that is being accessed is locked. 424 Failed Dependency (WebDAV; RFC 4918) The request failed due to failure of previous request (e.g., PROPPATCH). 426 Upgrade Required The client should switch to different protocol such as TLS/1.0, given in the Upgrade header field. 428 Precondition Required (RFC 6585) The origin server requires the request to be conditional. Intended to prevent the 'lost update' problem, where client GETs resource's state, modifies it, and PUTs it back to the server, when meanwhile third party has modified the state on the server, leading to conflict." 429 Too Many Requests (RFC 6585) The user has sent too many requests in given amount of time. Intended for use with rate-limiting schemes. 431 Request Header Fields Too Large (RFC 6585) The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large. 451 Unavailable For Legal Reasons (RFC 7725) server operator has received legal demand to deny access to resource or to set of resources that includes the requested resource. The code 451 was chosen as reference to the novel ''Fahrenheit 451'' (see the in the RFC). == 5xx সার্ভারের ত্রুটিসমূহ == The server failed to fulfill request. Response status codes beginning with the digit "5" indicate cases in which the server is aware that it has encountered an error or is otherwise incapable of performing the request. Except when responding to HEAD request, the server ''should'' include an entity containing an explanation of the error situation, and indicate whether it is temporary or permanent condition. Likewise, user agents ''should'' display any included entity to the user. These response codes are applicable to any request method. 500 Internal Server Error generic error message, given when an unexpected condition was encountered and no more specific message is suitable. 501 Not Implemented The server either does not recognize the request method, or it lacks the ability to fulfill the request. Usually this implies future availability (e.g., new feature of web-service API). 502 Bad Gateway The server was acting as gateway or proxy and received an invalid response from the upstream server. 503 Service Unavailable The server is currently unavailable (because it is overloaded or down for maintenance). Generally, this is temporary state. 504 Gateway Timeout The server was acting as gateway or proxy and did not receive timely response from the upstream server. 505 HTTP Version Not Supported The server does not support the HTTP protocol version used in the request. 506 Variant Also Negotiates (RFC 2295) Transparent content negotiation for the request results in circular reference. 507 Insufficient Storage (WebDAV; RFC 4918) The server is unable to store the representation needed to complete the request. 508 Loop Detected (WebDAV; RFC 5842) The server detected an infinite loop while processing the request (sent in lieu of 208 Already Reported). 510 Not Extended (RFC 2774) Further extensions to the request are required for the server to fulfil it. 511 Network Authentication Required (RFC 6585) The client needs to authenticate to gain network access. Intended for use by intercepting proxies used to control access to the network (e.g., "captive portals" used to require agreement to Terms of Service before granting full Internet access via Wi-Fi hotspot). == অননুমোদিত কোডসমূহ == The following codes are not specified by any standard. 103 Checkpoint Used in the resumable requests proposal to resume aborted PUT or POST requests. 420 Method Failure (Spring Framework) deprecated response used by the Spring Framework when method has failed. 420 Enhance Your Calm (Twitter) Returned by version of the Twitter Search and Trends API when the client is being rate limited; versions 1.1 and later use the 429 Too Many Requests response code instead. 450 Blocked by Windows Parental Controls (Microsoft) The Microsoft extension code indicated when Windows Parental Controls are turned on and are blocking access to the requested webpage. 498 Invalid Token (Esri) Returned by ArcGIS for Server. Code 498 indicates an expired or otherwise invalid token. 499 Token Required (Esri) Returned by ArcGIS for Server. Code 499 indicates that token is required but was not submitted. 509 Bandwidth Limit Exceeded (Apache Web Server/cPanel) The server has exceeded the bandwidth specified by the server administrator; this is often used by shared hosting providers to limit the bandwidth of customers. 530 Site is frozen Used by the Pantheon web platform to indicate site that has been frozen due to inactivity. 598 (Informal convention) Network read timeout error Used by some HTTP proxies to signal network read timeout behind the proxy to client in front of the proxy. === ইন্টারনেট ইনফরমেশন সার্ভিসেস (আইআইএস) === Microsoft's Internet Information Services web server expands the 4xx error space to signal errors with the client's request. 440 Login Time-out The client's session has expired and must log in again. 449 Retry With The server cannot honour the request because the user has not provided the required information. 451 Redirect Used in Exchange ActiveSync when either more efficient server is available or the server cannot access the users' mailbox. The client is expected to re-run the HTTP AutoDiscover operation to find more appropriate server. === ইঞ্জিনেক্স (nginx) === The nginx web server software expands the 4xx error space to signal issues with the client's request. 444 No Response Used to indicate that the server has returned no information to the client and closed the connection. 495 SSL Certificate Error An expansion of the 400 Bad Request response code, used when the client has provided an invalid client certificate. 496 SSL Certificate Required An expansion of the 400 Bad Request response code, used when client certificate is required but not provided. 497 HTTP Request Sent to HTTPS Port An expansion of the 400 Bad Request response code, used when the client has made HTTP request to port listening for HTTPS requests. 499 Client Closed Request Used when the client has closed the request before the server could send response. === ক্লাউডফ্লেয়ার === Cloudflare's reverse proxy service expands the 5xx series of errors space to signal issues with the origin server. 520 Unknown Error The 520 error is used as "catch-all response for when the origin server returns something unexpected", listing connection resets, large headers, and empty or invalid responses as common triggers. 521 Web Server Is Down The origin server has refused the connection from Cloudflare. 522 Connection Timed Out Cloudflare could not negotiate TCP handshake with the origin server. 523 Origin Is Unreachable Cloudflare could not reach the origin server; for example, if the DNS records for the origin server are incorrect. 524 Timeout Occurred Cloudflare was able to complete TCP connection to the origin server, but did not receive timely HTTP response. 525 SSL Handshake Failed Cloudflare could not negotiate SSL/TLS handshake with the origin server. 526 Invalid SSL Certificate Cloudflare could not validate the SSL/TLS certificate that the origin server presented. 527 Railgun Error Error 527 indicates that the request timed out or failed after the WAN connection had been established. == টীকা == == তথ্যসূত্র == == বহিঃসংযোগ == Hypertext Transfer Protocol (HTTP) Status Code Registry Microsoft Knowledge Base: MSKB943891: The HTTP status codes in IIS 7.0 __FORCETOC__